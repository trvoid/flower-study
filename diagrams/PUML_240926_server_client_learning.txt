@startuml

title "Flower - 학습 시퀀스 다이어그램\n(2024-09-26)"

autonumber

box "중앙(서버)" #LightGrey
    entity strategy
    entity server
endbox

box "지역(클라이언트)" #LightBlue
    entity client
endbox

== 모델 파라미터 초기화 ==

server -> server: _get_initial_parameters()
activate server
    server -[#red]> strategy: initialize_parameters(client_manager)
    server <-- strategy: parameters
    note left: 글로벌 모델의 초기 파라미터 제공
    alt strategy가 초기 파라미터를 제공하지 않을 경우
        server -[#red]> client: get_parameters()
        server <-- client: GetParametersRes
        note right: 임의로 선정한 한 개의 클라이언트로부터 초기 파라미터 가져 옴
    end
deactivate server

== 초기 파라미터로 글로벌 모델 평가 ==

server -[#red]> strategy: evaluate(parameters)
note left: 글로벌 모델을 서버에서 평가
activate server
    server <-- strategy: loss_cen, metrics_cen
deactivate server
    
== 지정한 횟수만큼 학습과 평가 반복 ==

loop num_rounds
    server -> server: fit_round()
    note right: 모델을 클라이언트들에게 보내서 학습하고 결과 취합하여 글로벌 모델 생성
    activate server
        server -[#red]> strategy: configure_fit()
        server <-- strategy: client_instructions
        note left: 학습을 위한 설정 제공
        
        server -> server: fit_clients()
        activate server
            group ThreadPool
                server -[#red]> client: fit()
                note right: 서버로부터 받은 모델과 설정으로 학습
                server <-- client: FitRes
            end
        deactivate server
        server -[#red]> strategy: aggregate_fit()
        note left: 클라이언트들로부터 받은 학습 결과 취합
        server <-- strategy: aggregated_result
    deactivate server
    
    server -[#red]> strategy: evaluate(parameters)
    note left: 글로벌 모델을 서버에서 평가
    activate server
        server <-- strategy: loss_cen, metrics_cen
    deactivate server
    
    server -> server: evaluate_round()
    note right: 글로벌 모델을 클라이언트들에게 보내서 평가하고 결과 취합
    activate server
        server -[#red]> strategy: configure_evalute()
        server <-- strategy: client_instructions
        note left: 평가를 위한 설정 제공
        
        server -> server: evaluate_clients()
        activate server
            group ThreadPool
                server -[#red]> client: evaluate()
                note right: 서버로부터 받은 모델과 설정으로 평가
                server <-- client: EvaluateRes
            end
        deactivate server
        server -[#red]> strategy: aggregate_evalute()
        note left: 클라이언트들로부터 받은 평가 결과 취합
        server <-- strategy: aggregated_result
    deactivate server
end

@enduml
